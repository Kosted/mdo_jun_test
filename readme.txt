Локальное развертывание проекта:

    >> virtualenv venv

    >> source venv/bin/activate

    >> pip install -r requirements.txt

    >> python main.py

API:

http://127.0.0.1:8000/recommend/sku=KokKBQSeEu

в sku указывается название "товара" для которого необходимо получить рекомендации

Настройки производятся через .env файле

DELTA=0.4
HOSTNAME=localhost
ERVERPORT=8000
FORSE_REREAD_FLAG=False))

Где:
DELTA - близость рекомендаций
HOSTNAME - хих
ERVERPORT - хих2
FORSE_REREAD_FLAG - Принудительная загрузка и парсинг из cvs файла даже при наличи запаршеного pickle

Первый запуск - за неимением скомпанованного файла, начнется парсинг из csv файла ~3 минуты на моей машине.
    Далее результат записывается в pickle для быстрой загрузки при рестарте

Последующие запуски осуществляются за 5-10 секунд.

На моей машине локально запрос на получение рекомендации выполнятеся в среднем за 5 ms

===============================================================================
"Нужно выполнить задание и расписать с чем возникли сложности, что получилось, а что нет и по какой причине"
==================================================================================
не получилось уместиться в 5 гб оперативной памяти, если верить:

>> pip install psutil
import os
import psutil
pid = os.getpid()
py = psutil.Process(pid)
memoryUse = py.memory_info()[0]/2.**30
print('memory use:', memoryUse)

ответом было 6гб с копейками. В системном мониторе загрузка памяти возрастала примерно на этоже число

Далее был добавлен метод, который уже в готовом объекте с рекомендациями преобразовывал все list в tuple.
Таким образом было отыграно ~600мб

Далее были использованы именнованные кортежи, после dataclass пронаследованный от NamedTuple. Но в этом случае
было получено даже увеличение размера в оперативной память. этот вариант я загружу в отдельную ветку NamedTuple